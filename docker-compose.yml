version: '3.8'

services:
  # MegaVault Web Application
  megavault:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: megavault-app
    ports:
      - \"3001:3001\"
    environment:
      # Database
      - UPSTASH_REDIS_REST_URL=redis://redis:6379
      - UPSTASH_REDIS_REST_TOKEN=${REDIS_TOKEN:-default_token}
      
      # Storage (S3 Compatible)
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION:-auto}
      
      # Authentication
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3001}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      
      # Admin Configuration
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      
      # Application Settings
      - DEFAULT_STORAGE_LIMIT_GB=${DEFAULT_STORAGE_LIMIT_GB:-50}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-100}
      - ENABLE_PUBLIC_REGISTRATION=${ENABLE_PUBLIC_REGISTRATION:-true}
      - ENABLE_FILE_SHARING=${ENABLE_FILE_SHARING:-true}
      - ENABLE_3D_VISUALIZATION=${ENABLE_3D_VISUALIZATION:-false}
      
      # Optional: Custom Branding
      - APP_NAME=${APP_NAME:-MegaVault}
      - APP_DESCRIPTION=${APP_DESCRIPTION:-Open Source Cloud Storage}
      
      # Client-side Environment Variables
      - NEXT_PUBLIC_ADMIN_EMAIL=${ADMIN_EMAIL}
      - NEXT_PUBLIC_DEFAULT_STORAGE_LIMIT_GB=${DEFAULT_STORAGE_LIMIT_GB:-50}
      - NEXT_PUBLIC_APP_NAME=${APP_NAME:-MegaVault}
      - NEXT_PUBLIC_APP_DESCRIPTION=${APP_DESCRIPTION:-Open Source Cloud Storage}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      # Optional: Bind mount for logs
      - ./logs:/app/logs
    networks:
      - megavault-network

  # Redis Database
  redis:
    image: redis:7-alpine
    container_name: megavault-redis
    ports:
      - \"6379:6379\"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-megavault_redis_password}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-megavault_redis_password}
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: [\"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - megavault-network

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: megavault-nginx
    ports:
      - \"80:80\"
      - \"443:443\"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - megavault
    restart: unless-stopped
    networks:
      - megavault-network
    profiles:
      - with-nginx

volumes:
  redis_data:
    driver: local

networks:
  megavault-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

# Development overrides
services:
  megavault:
    build:
      target: development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    command: npm run dev